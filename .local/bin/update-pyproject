#!/usr/bin/env julia

import TOML

"""Parse a dependency with just a version."""
function parse_dependency(name::String, _version::String; is_dev::Bool)
    return (name = name, extras = [], is_dev = is_dev)
end

"""Parse a dependency with extras."""
function parse_dependency(name::String, d::Dict; is_dev::Bool)
    extras = get(d, "extras", [])
    return (name = name, extras = extras, is_dev = is_dev)
end

function get_cli_command(name, extras, is_dev)
    dev_flag = is_dev ? "--dev" : missing
    extras_arguments = vcat([["--extras", extra] for extra in extras]...)
    return ["poetry", "add", dev_flag, extras_arguments..., "$name@latest"] |> skipmissing |> (x -> join(x, " "))
end

pyproject_path = joinpath(pwd(), "pyproject.toml")
pyproject = open(f -> read(f, String), pyproject_path, "r") |> TOML.parse
dependencies = [
    parse_dependency(name, x; is_dev = false) for
    (name, x) in pyproject["tool"]["poetry"]["dependencies"] if name != "python"
]
dev_dependencies =
    [parse_dependency(name, x; is_dev = true) for (name, x) in pyproject["tool"]["poetry"]["dev-dependencies"]]
commands = [get_cli_command(d...) for d in vcat(dependencies, dev_dependencies)]
for command in commands
    println(command)
end
