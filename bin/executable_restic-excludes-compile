#!/usr/bin/env python3

import argparse
import json
from pathlib import Path
from typing import Dict, Iterable, List, Tuple, TypeVar

T = TypeVar("T")


def flatten(nested_list: Iterable[Iterable[T]]) -> List[T]:
    return [item for sublist in nested_list for item in sublist]


def get_cli_args() -> Tuple[Path, Path]:
    parser = argparse.ArgumentParser()
    parser.add_argument("--output", type=Path, required=True)
    parser.add_argument("input_file_path", type=Path)
    args = parser.parse_args()
    return (args.input_file_path, args.output)


def read_excludes(file_path: Path) -> Dict[str, List[str]]:
    with open(file_path, "r") as f:
        return json.load(f)


def convert_excludes(excludes: Dict[str, List[str]]) -> str:
    return "\n".join(
        flatten(
            ([f"# {category}"] + exclude_paths)
            for category, exclude_paths in excludes.items()
        )
    )


def write_excludes(excludes: str, file_path: Path) -> None:
    with open(file_path, "w") as f:
        f.write(excludes)


def main()->None:
    (input_file_path, output_file_path) = get_cli_args()
    write_excludes(convert_excludes(read_excludes(input_file_path)), output_file_path)
    print(
        f"Converted restic excludes file from `{input_file_path}` to `{output_file_path}`."
    )


if __name__ == "__main__":
    main()
