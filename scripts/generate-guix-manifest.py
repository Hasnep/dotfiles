#!/usr/bin/env python3.11

import tomllib as toml
from dataclasses import dataclass
from pathlib import Path
from typing import List, Dict
from argparse import ArgumentParser
import subprocess
import json
import re


Packages = Dict[str, List[str]]


@dataclass
class CliArgs:
    manifest_file_path: Path
    packages_file_path: Path


def get_cli_args() -> CliArgs:
    parser = ArgumentParser()
    parser.add_argument("--packages-file", type=Path)
    parser.add_argument("--manifest-file", type=Path)
    args = parser.parse_args()
    return CliArgs(
        args.manifest_file,
        args.packages_file,
    )


def read_packages_file(packages_file_path: Path) -> Packages:
    with open(packages_file_path, "r") as f:
        packages_string = f.read()

    packages_file_extension = packages_file_path.suffix

    match packages_file_extension:
        case ".toml":
            packages = toml.loads(packages_string)
        case ".jsonc":
            packages_string_no_comments = re.sub(r"//.*", "", packages_string)
            packages = json.loads(packages_string_no_comments)
        case ".json":
            packages = json.loads(packages_string)
        case _:
            raise Exception(f"Unknown file extension: `{packages_file_extension}`.")

    return {k: v for (k, v) in packages.items() if k != "ignore"}


def reconstruct_generate_command(cli_args: CliArgs) -> str:
    return " ".join(
        [
            "generate-guix-manifest",
            f"--packages-file={cli_args.packages_file_path}",
            f"--manifest-file={cli_args.manifest_file_path}",
        ]
    )


def construct_package_command() -> str:
    return " ".join(
        [
            "guix",
            "package",
            "--manifest=$GUIX_MANIFEST",
            "--profile=$GUIX_PROFILE",
        ]
    )


def get_manifest(packages: Packages, cli_args: CliArgs) -> str:
    def enquote(s: str) -> str:
        return f'"{s}"'

    packages_string = "\n".join(
        ["\n".join([f"; {k}"] + [enquote(p) for p in v]) for (k, v) in packages.items()]
    )
    return "\n".join(
        [
            "; Generated by running the following command:",
            "; " + reconstruct_generate_command(cli_args),
            "",
            "; To apply the manifest, run the following command:",
            "; " + construct_package_command(),
            "",
            f"(specifications->manifest '({packages_string}))",
        ]
    )


def write_manifest_file(packages: Packages, cli_args: CliArgs) -> None:
    print(f"Writing manifest file to `{cli_args.manifest_file_path}`.")
    with open(cli_args.manifest_file_path, "w") as f:
        f.write(get_manifest(packages, cli_args))


def format_manifest(manifest_file_path: Path) -> None:
    format_command = ["guix", "style", "--whole-file", str(manifest_file_path)]
    print(f"Formatting manifest file using command `{' '.join(format_command)}`.")
    subprocess.run(format_command)


if __name__ == "__main__":
    cli_args = get_cli_args()
    packages = read_packages_file(cli_args.packages_file_path)
    write_manifest_file(packages, cli_args)
    format_manifest(cli_args.manifest_file_path)
    print("To apply the manifest, run the following command:")
    print(construct_package_command())
